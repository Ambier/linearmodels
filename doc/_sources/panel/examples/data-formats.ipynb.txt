{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Data Formats for Panel Data Analysis\n",
    "\n",
    "There are two primary methods to express data:\n",
    "\n",
    "  * MultiIndex DataFrames where the outer index is the entity and the inner is the time index.  This requires using pandas.\n",
    "  * 3D structures were dimension 0 (outer) is variable, dimension 1 is time index and dimension 2 is the entity index.  It is also possible to use a 2D data structure with dimensions (t, n) which is treated as a 3D data structure having dimesions (1, t, n). These 3D data structures can be pandas, NumPy or xarray."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Multi Index DataFrames\n",
    "The most precise data format to use is a MultiIndex `DataFrame`.  This is the most precise since only single columns can preserve all types within a panel.  For example, it is not possible to span a single Categorical variable across multiple columns when using a pandas `Panel`. \n",
    "\n",
    "This example uses the jobtraining example to format a MultiIndex `DataFrame` using the `set_index` command. The entity index is known as fcode and the time index is year."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   year   fcode  employ       sales   avgsal  scrap  rework  tothrs  union  \\\n",
      "0  1987  410032   100.0  47000000.0  35000.0    NaN     NaN    12.0      0   \n",
      "1  1988  410032   131.0  43000000.0  37000.0    NaN     NaN     8.0      0   \n",
      "2  1989  410032   123.0  49000000.0  39000.0    NaN     NaN     8.0      0   \n",
      "3  1987  410440    12.0   1560000.0  10500.0    NaN     NaN    12.0      0   \n",
      "4  1988  410440    13.0   1970000.0  11000.0    NaN     NaN    12.0      0   \n",
      "\n",
      "   grant    ...     grant_1  clscrap  cgrant  clemploy   clsales    lavgsal  \\\n",
      "0      0    ...           0      NaN       0       NaN       NaN  10.463100   \n",
      "1      0    ...           0      NaN       0  0.270027 -0.088949  10.518670   \n",
      "2      0    ...           0      NaN       0 -0.063013  0.130621  10.571320   \n",
      "3      0    ...           0      NaN       0       NaN       NaN   9.259130   \n",
      "4      0    ...           0      NaN       0  0.080043  0.233347   9.305651   \n",
      "\n",
      "   clavgsal  cgrant_1   chrsemp  clhrsemp  \n",
      "0       NaN       NaN       NaN       NaN  \n",
      "1  0.055570       0.0 -8.946565 -1.165385  \n",
      "2  0.052644       0.0  0.198597  0.047832  \n",
      "3       NaN       NaN       NaN       NaN  \n",
      "4  0.046520       0.0  0.000000  0.000000  \n",
      "\n",
      "[5 rows x 30 columns]\n"
     ]
    }
   ],
   "source": [
    "from linearmodels.datasets import jobtraining\n",
    "data = jobtraining.load()\n",
    "print(data.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here `set_index` is used to set the multi index using the firm code (entity) and year (time)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             employ       sales   avgsal  scrap  rework  tothrs  union  grant  \\\n",
      "fcode  year                                                                     \n",
      "410032 1987   100.0  47000000.0  35000.0    NaN     NaN    12.0      0      0   \n",
      "       1988   131.0  43000000.0  37000.0    NaN     NaN     8.0      0      0   \n",
      "       1989   123.0  49000000.0  39000.0    NaN     NaN     8.0      0      0   \n",
      "410440 1987    12.0   1560000.0  10500.0    NaN     NaN    12.0      0      0   \n",
      "       1988    13.0   1970000.0  11000.0    NaN     NaN    12.0      0      0   \n",
      "\n",
      "             d89  d88    ...     grant_1  clscrap  cgrant  clemploy   clsales  \\\n",
      "fcode  year              ...                                                    \n",
      "410032 1987    0    0    ...           0      NaN       0       NaN       NaN   \n",
      "       1988    0    1    ...           0      NaN       0  0.270027 -0.088949   \n",
      "       1989    1    0    ...           0      NaN       0 -0.063013  0.130621   \n",
      "410440 1987    0    0    ...           0      NaN       0       NaN       NaN   \n",
      "       1988    0    1    ...           0      NaN       0  0.080043  0.233347   \n",
      "\n",
      "               lavgsal  clavgsal  cgrant_1   chrsemp  clhrsemp  \n",
      "fcode  year                                                     \n",
      "410032 1987  10.463100       NaN       NaN       NaN       NaN  \n",
      "       1988  10.518670  0.055570       0.0 -8.946565 -1.165385  \n",
      "       1989  10.571320  0.052644       0.0  0.198597  0.047832  \n",
      "410440 1987   9.259130       NaN       NaN       NaN       NaN  \n",
      "       1988   9.305651  0.046520       0.0  0.000000  0.000000  \n",
      "\n",
      "[5 rows x 28 columns]\n"
     ]
    }
   ],
   "source": [
    "mi_data = data.set_index(['fcode', 'year'])\n",
    "print(mi_data.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `MultiIndex` `DataFrame` can be used to initialized the model.  When only referencing a single series, the `MultiIndex` `Series` representation can be used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:                 lscrap   R-squared:                        0.0528\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.0379\n",
      "No. Observations:                 140   R-squared (Within):               0.0528\n",
      "Date:                Sun, Apr 09 2017   R-squared (Overall):             -0.0288\n",
      "Time:                        15:16:27                                           \n",
      "Cov. Estimator:            Unadjusted   F-statistic:                      5.0751\n",
      "                                        P-value                           0.0267\n",
      "Entities:                          48   Distribution:                    F(1,91)\n",
      "Avg Obs:                       2.9167                                           \n",
      "Min Obs:                       1.0000   F-statistic (robust):             7.8079\n",
      "Max Obs:                       3.0000   P-value                           0.0052\n",
      "                                        Distribution:                    chi2(1)\n",
      "Time periods:                       3                                           \n",
      "Avg Obs:                       46.667   F-stat (pooled):                  18.256\n",
      "Min Obs:                       46.000   P-value                           0.0000\n",
      "Max Obs:                       48.000   Distribution:                   F(48,91)\n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "           Parameters  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "hrsemp        -0.0054     0.0019    -2.7943     0.0052     -0.0092     -0.0016\n",
      "==============================================================================\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\git\\linearmodels\\linearmodels\\panel\\model.py:192: MissingValueWarning: \n",
      "Inputs contain missing values. Dropping rows with missing observations.\n",
      "  warnings.warn(missing_value_warning_msg, MissingValueWarning)\n"
     ]
    }
   ],
   "source": [
    "from linearmodels import PanelOLS\n",
    "mod = PanelOLS(mi_data.lscrap, mi_data.hrsemp, entity_effect=True)\n",
    "print(mod.fit())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## pandas Panels and DataFrames\n",
    "An alternative formal is to use pandas Panels ad DataFrames.  Panels should be formatted with `items` containing distinct variables, `major_axis` holding the time dimension and `minor_axis` holding the entity index.  Here we transform the MultiIndex DataFrame to a panel to demonstrate this format.\n",
    "\n",
    "A single index DataFrame can also be used and is treated as being a single item slice of a Panel, and so the items should contain the time series dimension and the columns should contain entities. Note that using the `DataFrame` version loses information about variable names, which is not usually desirable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<class 'pandas.core.panel.Panel'>\n",
       "Dimensions: 2 (items) x 3 (major_axis) x 157 (minor_axis)\n",
       "Items axis: lscrap to hrsemp\n",
       "Major_axis axis: 1987 to 1989\n",
       "Minor_axis axis: 410032 to 419486"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "panel = mi_data[['lscrap','hrsemp']].to_panel().swapaxes(1,2)\n",
    "lscrap = panel['lscrap']\n",
    "hrsemp = panel['hrsemp']\n",
    "panel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When using panels, it is best to input the panel which requires selecting using `[[`_var_`]]` so ensure that the variable(s) selected still has 3 dimensions.  This retains information about variable name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\git\\linearmodels\\linearmodels\\panel\\model.py:192: MissingValueWarning: \n",
      "Inputs contain missing values. Dropping rows with missing observations.\n",
      "  warnings.warn(missing_value_warning_msg, MissingValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:                 lscrap   R-squared:                        0.0528\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.0379\n",
      "No. Observations:                 140   R-squared (Within):               0.0528\n",
      "Date:                Sun, Apr 09 2017   R-squared (Overall):             -0.0288\n",
      "Time:                        15:16:27                                           \n",
      "Cov. Estimator:            Unadjusted   F-statistic:                      5.0751\n",
      "                                        P-value                           0.0267\n",
      "Entities:                          48   Distribution:                    F(1,91)\n",
      "Avg Obs:                       2.9167                                           \n",
      "Min Obs:                       1.0000   F-statistic (robust):             7.8079\n",
      "Max Obs:                       3.0000   P-value                           0.0052\n",
      "                                        Distribution:                    chi2(1)\n",
      "Time periods:                       3                                           \n",
      "Avg Obs:                       46.667   F-stat (pooled):                  18.256\n",
      "Min Obs:                       46.000   P-value                           0.0000\n",
      "Max Obs:                       48.000   Distribution:                   F(48,91)\n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "           Parameters  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "hrsemp        -0.0054     0.0019    -2.7943     0.0052     -0.0092     -0.0016\n",
      "==============================================================================\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "res = PanelOLS(panel[['lscrap']],panel[['hrsemp']],entity_effect=True).fit()\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using DataFrames removes this information and so the generic _Dep_ and _Exog_ are used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\git\\linearmodels\\linearmodels\\panel\\model.py:192: MissingValueWarning: \n",
      "Inputs contain missing values. Dropping rows with missing observations.\n",
      "  warnings.warn(missing_value_warning_msg, MissingValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:                    Dep   R-squared:                        0.0528\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.0379\n",
      "No. Observations:                 140   R-squared (Within):               0.0528\n",
      "Date:                Sun, Apr 09 2017   R-squared (Overall):             -0.0288\n",
      "Time:                        15:16:27                                           \n",
      "Cov. Estimator:            Unadjusted   F-statistic:                      5.0751\n",
      "                                        P-value                           0.0267\n",
      "Entities:                          48   Distribution:                    F(1,91)\n",
      "Avg Obs:                       2.9167                                           \n",
      "Min Obs:                       1.0000   F-statistic (robust):             7.8079\n",
      "Max Obs:                       3.0000   P-value                           0.0052\n",
      "                                        Distribution:                    chi2(1)\n",
      "Time periods:                       3                                           \n",
      "Avg Obs:                       46.667   F-stat (pooled):                  18.256\n",
      "Min Obs:                       46.000   P-value                           0.0000\n",
      "Max Obs:                       48.000   Distribution:                   F(48,91)\n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "           Parameters  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "Exog          -0.0054     0.0019    -2.7943     0.0052     -0.0092     -0.0016\n",
      "==============================================================================\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "res = PanelOLS(lscrap,hrsemp,entity_effect=True).fit()\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## NumPy arrays\n",
    "NumPy arrays are treated identically to pandas Panel and single index DataFrames.  In particular, using `panel.values` and `df.values` will produce identical results.  The main difference between NumPy and pandas is that NumPy loses all lable information."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\git\\linearmodels\\linearmodels\\panel\\model.py:192: MissingValueWarning: \n",
      "Inputs contain missing values. Dropping rows with missing observations.\n",
      "  warnings.warn(missing_value_warning_msg, MissingValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:                    Dep   R-squared:                        0.0528\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.0379\n",
      "No. Observations:                 140   R-squared (Within):               0.0528\n",
      "Date:                Sun, Apr 09 2017   R-squared (Overall):             -0.0288\n",
      "Time:                        15:16:27                                           \n",
      "Cov. Estimator:            Unadjusted   F-statistic:                      5.0751\n",
      "                                        P-value                           0.0267\n",
      "Entities:                          48   Distribution:                    F(1,91)\n",
      "Avg Obs:                       2.9167                                           \n",
      "Min Obs:                       1.0000   F-statistic (robust):             7.8079\n",
      "Max Obs:                       3.0000   P-value                           0.0052\n",
      "                                        Distribution:                    chi2(1)\n",
      "Time periods:                       3                                           \n",
      "Avg Obs:                       46.667   F-stat (pooled):                  18.256\n",
      "Min Obs:                       46.000   P-value                           0.0000\n",
      "Max Obs:                       48.000   Distribution:                   F(48,91)\n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "           Parameters  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "Exog          -0.0054     0.0019    -2.7943     0.0052     -0.0092     -0.0016\n",
      "==============================================================================\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "res = PanelOLS(lscrap.values, hrsemp.values,entity_effect=True).fit()\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## xarray DataArrays\n",
    "\n",
    "xarray is a relatively new entrant into the set of packages used for data structures.  It is important in the context of panel models since pandas Panel is scheduled for removal in the futures, and so the only 3d data format that will remain vaiable is an xarray DataArray. `DataArray`s are similar to pandas `Panel` although they use some of their own notation and concentions.  In principle it is possible to express the same information in a `DataArray` as one can in a `Panel`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xarray.DataArray (items: 2, major_axis: 3, minor_axis: 157)>\n",
       "array([[[       nan,        nan, ...,   2.995732,        nan],\n",
       "        [       nan,        nan, ...,   3.218876,        nan],\n",
       "        [       nan,        nan, ...,   3.401197,        nan]],\n",
       "\n",
       "       [[ 12.      ,  12.      , ...,   0.      ,   0.      ],\n",
       "        [  3.053435,  12.      , ...,   0.      ,   0.      ],\n",
       "        [  3.252033,  10.      , ...,   3.100775,  36.      ]]])\n",
       "Coordinates:\n",
       "  * items       (items) object 'lscrap' 'hrsemp'\n",
       "  * major_axis  (major_axis) int64 1987 1988 1989\n",
       "  * minor_axis  (minor_axis) int64 410032 410440 410495 410500 410501 410509 ..."
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "da = panel.to_xarray()\n",
    "da"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\git\\linearmodels\\linearmodels\\panel\\model.py:192: MissingValueWarning: \n",
      "Inputs contain missing values. Dropping rows with missing observations.\n",
      "  warnings.warn(missing_value_warning_msg, MissingValueWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:                 lscrap   R-squared:                        0.0528\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.0379\n",
      "No. Observations:                 140   R-squared (Within):               0.0528\n",
      "Date:                Sun, Apr 09 2017   R-squared (Overall):             -0.0288\n",
      "Time:                        15:16:27                                           \n",
      "Cov. Estimator:            Unadjusted   F-statistic:                      5.0751\n",
      "                                        P-value                           0.0267\n",
      "Entities:                          48   Distribution:                    F(1,91)\n",
      "Avg Obs:                       2.9167                                           \n",
      "Min Obs:                       1.0000   F-statistic (robust):             7.8079\n",
      "Max Obs:                       3.0000   P-value                           0.0052\n",
      "                                        Distribution:                    chi2(1)\n",
      "Time periods:                       3                                           \n",
      "Avg Obs:                       46.667   F-stat (pooled):                  18.256\n",
      "Min Obs:                       46.000   P-value                           0.0000\n",
      "Max Obs:                       48.000   Distribution:                   F(48,91)\n",
      "                                                                                \n",
      "                             Parameter Estimates                              \n",
      "==============================================================================\n",
      "           Parameters  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "------------------------------------------------------------------------------\n",
      "hrsemp        -0.0054     0.0019    -2.7943     0.0052     -0.0092     -0.0016\n",
      "==============================================================================\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "res = PanelOLS(da.loc[['lscrap']], da.loc[['hrsemp']], entity_effect=True).fit()\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "## Conversion of Categorical and Strings to Dummies\n",
    "Categorical or string variables are treated as factors and so are converted to dummies. The first category is always dropped.  If this is not desirable, you should manually convert the data to dummies before estimating a model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "year_str = mi_data.reset_index()[['time']].astype('str')\n",
    "year_cat = pd.Categorical(year_str.iloc[:,0])\n",
    "year_str.index = mi_data.index\n",
    "year_cat.index = mi_data.index\n",
    "mi_data['year_str'] = year_str\n",
    "mi_data['year_cat'] = year_cat"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here year has been converted to a string which is then used in the model to produce year dummies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exogenous variables\n",
      "                hrsemp year_str\n",
      "entity time                    \n",
      "410032 1987  12.000000     1987\n",
      "       1988   3.053435     1988\n",
      "       1989   3.252033     1989\n",
      "410440 1987  12.000000     1987\n",
      "       1988  12.000000     1988\n",
      "hrsemp      float64\n",
      "year_str     object\n",
      "dtype: object\n",
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:                 lscrap   R-squared:                        0.1985\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.1240\n",
      "No. Observations:                 140   R-squared (Within):               0.1985\n",
      "Date:                Sun, Apr 09 2017   R-squared (Overall):             -0.0934\n",
      "Time:                        15:22:15                                           \n",
      "Cov. Estimator:            Unadjusted   F-statistic:                      7.3496\n",
      "                                        P-value                           0.0002\n",
      "Entities:                          48   Distribution:                    F(3,89)\n",
      "Avg Obs:                       2.9167                                           \n",
      "Min Obs:                       1.0000   F-statistic (robust):             34.683\n",
      "Max Obs:                       3.0000   P-value                           0.0000\n",
      "                                        Distribution:                    chi2(3)\n",
      "Time periods:                       3                                           \n",
      "Avg Obs:                       46.667   F-stat (pooled):                  20.882\n",
      "Min Obs:                       46.000   P-value                           0.0000\n",
      "Max Obs:                       48.000   Distribution:                   F(48,89)\n",
      "                                                                                \n",
      "                               Parameter Estimates                               \n",
      "=================================================================================\n",
      "              Parameters  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "---------------------------------------------------------------------------------\n",
      "hrsemp           -0.0024     0.0019    -1.2615     0.2071     -0.0061      0.0013\n",
      "year_str.1988    -0.1591     0.0914    -1.7418     0.0815     -0.3382      0.0199\n",
      "year_str.1989    -0.4620     0.0937    -4.9287     0.0000     -0.6458     -0.2783\n",
      "=================================================================================\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\git\\linearmodels\\linearmodels\\panel\\model.py:192: MissingValueWarning: \n",
      "Inputs contain missing values. Dropping rows with missing observations.\n",
      "  warnings.warn(missing_value_warning_msg, MissingValueWarning)\n"
     ]
    }
   ],
   "source": [
    "print('Exogenous variables')\n",
    "print(mi_data[['hrsemp','year_str']].head())\n",
    "print(mi_data[['hrsemp','year_str']].dtypes)\n",
    "\n",
    "res = PanelOLS(mi_data[['lscrap']],mi_data[['hrsemp','year_str']],entity_effect=True).fit()\n",
    "print(res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using categoricals has the same effect."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exogenous variables\n",
      "                hrsemp year_cat\n",
      "entity time                    \n",
      "410032 1987  12.000000     1987\n",
      "       1988   3.053435     1988\n",
      "       1989   3.252033     1989\n",
      "410440 1987  12.000000     1987\n",
      "       1988  12.000000     1988\n",
      "hrsemp       float64\n",
      "year_cat    category\n",
      "dtype: object\n",
      "                          PanelOLS Estimation Summary                           \n",
      "================================================================================\n",
      "Dep. Variable:                 lscrap   R-squared:                        0.1985\n",
      "Estimator:                   PanelOLS   R-squared (Between):             -0.1240\n",
      "No. Observations:                 140   R-squared (Within):               0.1985\n",
      "Date:                Sun, Apr 09 2017   R-squared (Overall):             -0.0934\n",
      "Time:                        15:22:05                                           \n",
      "Cov. Estimator:            Unadjusted   F-statistic:                      7.3496\n",
      "                                        P-value                           0.0002\n",
      "Entities:                          48   Distribution:                    F(3,89)\n",
      "Avg Obs:                       2.9167                                           \n",
      "Min Obs:                       1.0000   F-statistic (robust):             34.683\n",
      "Max Obs:                       3.0000   P-value                           0.0000\n",
      "                                        Distribution:                    chi2(3)\n",
      "Time periods:                       3                                           \n",
      "Avg Obs:                       46.667   F-stat (pooled):                  20.882\n",
      "Min Obs:                       46.000   P-value                           0.0000\n",
      "Max Obs:                       48.000   Distribution:                   F(48,89)\n",
      "                                                                                \n",
      "                               Parameter Estimates                               \n",
      "=================================================================================\n",
      "              Parameters  Std. Err.     T-stat    P-value    Lower CI    Upper CI\n",
      "---------------------------------------------------------------------------------\n",
      "hrsemp           -0.0024     0.0019    -1.2615     0.2071     -0.0061      0.0013\n",
      "year_cat.1988    -0.1591     0.0914    -1.7418     0.0815     -0.3382      0.0199\n",
      "year_cat.1989    -0.4620     0.0937    -4.9287     0.0000     -0.6458     -0.2783\n",
      "=================================================================================\n",
      "\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\git\\linearmodels\\linearmodels\\panel\\model.py:192: MissingValueWarning: \n",
      "Inputs contain missing values. Dropping rows with missing observations.\n",
      "  warnings.warn(missing_value_warning_msg, MissingValueWarning)\n"
     ]
    }
   ],
   "source": [
    "print('Exogenous variables')\n",
    "print(mi_data[['hrsemp','year_cat']].head())\n",
    "print(mi_data[['hrsemp','year_cat']].dtypes)\n",
    "\n",
    "res = PanelOLS(mi_data[['lscrap']],mi_data[['hrsemp','year_cat']],entity_effect=True).fit()\n",
    "print(res)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
